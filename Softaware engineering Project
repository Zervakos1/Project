import random
import os

# Define the function to print the rules
def rules():
    print("1.RULES OF BLACKJACK")
    print("2.The hand with the highest total wins as long as it doesn't exceed 21")
    print("3.a hand with a higher total than 21 is said to bust")
    print("4.Cards 2 through 10 are worth their face value, and face cards (jack, queen, king) are also worth 10.")
    print("5.An ace's value is 11 unless this would cause the player to bust, in which case it is worth 1.")
    print("6.A hand in which an ace's value is counted as 11 is called a soft hand, because it cannot be busted if the player draws another card")
    print("7.If the dealer has blackjack and the player doesn't, the player automatically loses.")
    print("8.If the player has blackjack and the dealer doesn't, the player automatically wins.")
    print("9.If both the player and dealer have blackjack then it's a push.")
    print("10.If neither side has blackjack, then each player plays out his hand, one at a time.")
    print("11.When all the players have finished the dealer plays his hand.")
    print("12.If the dealer busts then all remaining players win. Bets are normally paid out at the odds of 1:1")
    print("13.After all the players have finished making their decisions, the dealer then reveals his or her hidden hole card and plays the hand.")
    print("14.House rules say that the dealer must hit until he or she has at least 17, regardless of what the players have.") 
    print("15.In most casinos a dealer must also hit a soft 17 (such as an ace and a 6). The felt of the table will indicate whether or not the house hits or stands on a soft 17.")
class User:
    def __init__(self, name, password):
        self.name = name
        self.password = password

class LoginRegister:
    def __init__(self):
        self.users = []

    def register(self, name, password):
        # Check if username already exists
        for user in self.users:
            if user.name == name:
                return False

        # Add new user
        new_user = User(name, password)
        self.users.append(new_user)

        # Write user to file
        with open('users.txt', 'a') as f:
            f.write(f"{name},{password}\n")

        return True

    def login(self, name, password):
        # Check if username and password match
        for user in self.users:
            if user.name == name and user.password == password:
                return True

        return False

    def load_users(self):
        # Load users from file
        try:
            with open('users.txt', 'r') as f:
                for line in f:
                    try:
                        name, password = line.strip().split(',')
                        self.users.append(User(name, password))
                    except ValueError:
                        pass
        except FileNotFoundError:
            pass

        # If there are no users in the file, prompt the user to register one
        if not self.users:
            print("No users found. Please register a new user.")
            name = input("Enter a username: ")
            password = input("Enter a password: ")
            self.register(name, password)
class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        if rank in ["J", "Q", "K"]:
            self.value = 10
        elif rank == "A":
            self.value = 11
        else:
            self.value = int(rank)

    def __str__(self):
        suits_symbols = {"Hearts": "♥", "Diamonds": "♦", "Clubs": "♣", "Spades": "♠"}
        return f"{self.rank} of {suits_symbols[self.suit]}"

class Deck:
    def __init__(self):
        suits = ["Hearts","Diamonds", "Clubs", "Spades"]
        ranks = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"]
        self.cards = [Card(rank, suit) for suit in suits for rank in ranks]
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop()

class Hand:
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0
        self.hidden=True

    def add_card(self, card,dealer=False):
        self.cards.append(card)
        if dealer and self.hidden:
            self.hidden = False
        elif not dealer:
            print(f"Card drawn: {card}")
        self.value += card.value
        if card.rank == "A":
            self.aces += 1

    def adjust_for_ace(self):
        while self.value > 21 and self.aces > 0:
            self.value -= 10
            self.aces -=1

    def clear(self):
        self.cards.clear()
        self.value = 0
        self.aces = 0
            

class Player:
    def __init__(self, name, chips=100):
        self.name= name
        self.hand = Hand()
        self.chips = chips
        self.dealer = Dealer()

    def hit_or_stand(self, deck):
        while True:
            print("-----------------------------------------------------------------")
            for card in self.hand.cards:
                print(card)
            print(f"The value is {self.hand.value}")
            try:
                if self.hand.value == 21:
                        print(f"{self.name} has a hand of 21")
                        break
                action = input(f"{self.name}, do you want to hit or stand? ")
                if action.lower() == "hit":
                    self.hand.add_card(deck.deal_card())
                    self.hand.adjust_for_ace()
                    if self.hand.value > 21:
                        print(f"{self.name} busts with a hand of {self.hand.value}.")
                        print(f"{self.name} lost the bet new ammount {self.chips}")
                        return "bust"
                elif action.lower() == "stand":
                    self.dealer.hand.hidden = False
                    print(f"{self.name} stands with a hand of {self.hand.value}.")
                    return "stand"
                else:
                    raise ValueError("Invalid input. Please enter 'hit' or 'stand'.")
            except ValueError as e:
                print("Wrong input. Please enter 'hit' or 'stand'")

    def make_bet(self):
        while True:
            try:
                bet = float(input(f"{self.name}, how many chips would you like to bet? "))
                if bet < 1 or bet > float(self.chips):
                    raise ValueError(f"Invalid bet. Please enter a bet between 1 and {self.chips}.")
                else:
                    self.chips -= bet
                    return bet
            except ValueError as e:
                print(f"Invalid bet. Please enter a bet between 1 and {self.chips}.")

    def win_bet(self,bet):
        self.chips += 2 * bet

    def tie_bet(self,bet):
        self.chips += bet
        
class Dealer:
    def __init__(self):
        self.name = "Dealer"
        self.hand = Hand()
        

    def hit_until_stand_or_bust(self, deck):
        print("-----------------------------------------------------------------")
        print("Dealers Turn")
        print(f"{self.hand.cards[0]} and hidden card is {self.hand.cards[1]} ")
        for card in self.hand.cards[2:]:
                print(f"Card drawn  {card}")
        print(f"The value is {self.hand.value}")
        if self.hand.value > 21:
            print(f"Dealer busts with a hand of {self.hand.value}.")
            return "bust"
        else:
            print(f"Dealer stands with a hand of {self.hand.value}.")
            return "stand"
class Blackjack:
    def __init__(self):
        self.current_player = None  # Initialize current player to None
        self.players = []
        self.dealer = Dealer()
        self.deck = Deck()
        self.login_register = LoginRegister()
        self.login_register.load_users()

    def clear_cards(self):
        for player in self.players:
            player.hand.clear()
        self.dealer.hand.clear()
        
        
    def play(self):
        # Clear the console screen
        if os.stat("users.txt").st_size == 0:
            print("No registered users found. Please register to play.")
        else:
            # Clear the console screen
            os.system('cls' if os.name == 'nt' else 'clear')

        # Print the rules and ask the user to press enter to continue
        rules()
        input("Press Enter to continue...\n")
        print("Starting game of blackjack.")
        print("-----------------------------------------------------------------")
        print("Loading user information from file:")
        print(f"{open('users.txt', 'r').read()}")
        quit = 0
        while quit != 1:
            choice = ""
            while choice != "register" and choice != "login" and choice != "play" and choice != "quit":
                choice = input("Do you want to:\n1.register \n2.login \n3.play \n4.quit \n").strip().lower()
                if choice not in ["register", "login", "play", "quit", "1", "2", "3", "4"]:
                    print("Incorrect input. Please enter one of the choices shown.")
                if choice == "register" or choice == "1":
                    while True:
                        name = input("Enter a username:\n").strip()
                        password = input("Enter a password:\n").strip()
                        if self.login_register.register(name, password):
                            print("Registration successful!")
                            print(f"Welcome, {name}!\n")
                            print("Updated user file ")
                            print("Loading user information from file:")
                            print(f"{open('users.txt', 'r').read()}")
                            break
                        else:
                            print("Username already exists. Please choose a different username.")
                if choice == "login" or choice == "2":
                    while True:
                        try:
                            if self.current_player:
                                choice = input("You are already logged in as {}. Do you want to log in again? (Y/N)\n ".format(self.current_player)).strip().lower()
                                if choice == "y":
                                    self.current_player = None
                                elif choice == "n":
                                    break
                                else:
                                    raise ValueError
                            else:
                                break
                        except ValueError:
                            print("Invalid choice. Please enter Y or N.")
                    while True:
                        name = input("Enter your username:\n").strip()
                        password = input("Enter your password:\n").strip()
                        if self.login_register.login(name, password):
                            self.current_player = name  # Update current player
                             # Check if player already exists in the list before creating a new Player object
                            if name not in [player.name for player in self.players]:
                                self.players.append(Player(name))
                            print(f"Welcome back, {name}!")
                            break
                        else:
                            try:
                                choice = input("Do you want to start over? (Y/N)\n ").strip().lower()
                                if choice == "n":
                                    break
                                elif choice != "y":
                                    print("Invalid input. Please enter Y or N.")
                                else:
                                    continue
                            except ValueError:
                                print("Invalid input. Type Y or N") 
                elif choice == "play" or choice == "3":
                    if not self.current_player:
                        print("You must log in first to play.")
                    else:
                        if len(self.players) == 0:
                            print("Sorry not players are logged in. Login in each player") 
                            break
                        else:
                            # Get the number of players
                            while True:
                                try:
                                    num_players = int(input("Enter the number of players:"))
                                    if num_players <= 0:
                                        print("Please enter a positive integer.")
                                    else:
                                        break
                                except ValueError:
                                    print("Please enter a positive integer.")
                        num_players=1
                        playAgain = True
                        names=[]
                        i=0
                        while playAgain == True and len(self.players) != 0:
                            for i in range(num_players-1):
                                while True:
                                    self.login_register.load_users()
                                    name = input(f"Enter the name of player {i+1}: ").strip()
                                    i+=1
                                    if name in names:
                                        print("This player has already been added. Please enter a different name.")
                                        continue
                                    elif self.login_register.login(name,password):
                                        self.players.append(Player(name,password))
                                        names.append(name)
                                        break
                                    else:
                                        print("This username does not exist. Please enter a valid username.")
                                    if len(self.players) == num_players+1:
                                        break
                            for player in self.players:
                                print(f"{player.name}, it's your turn.")
                                bet = player.make_bet()
                                player.hand.add_card(self.deck.deal_card())
                                player.hand.add_card(self.deck.deal_card())
                                print("-----------------------------------------------------------------")
                            print("Dealer's turn:")
                            self.dealer.hand.hidden = False
                            while self.dealer.hand.value < 17:
                                card = self.deck.deal_card()
                                self.dealer.hand.adjust_for_ace() 
                                self.dealer.hand.add_card(card, dealer=True)
                            print(f"Dealer's hand: {self.dealer.hand.cards[0]},  Hidden Card")
                            
                            for player in self.players:
                                if player.hit_or_stand(self.deck) == "bust":
                                    break
                            if self.dealer.hit_until_stand_or_bust(self.deck) == "bust":
                                for player in self.players:
                                    if player.hand.value <= 21:
                                        player.win_bet(bet)
                                        print(f"{player.name} wins!")
                                        print(f"{player.name} now has {player.chips} chips.")
                                    self.clear_cards()
                            else:
                                dealer_hand_value = self.dealer.hand.value
                                self.clear_cards()
                                for player in self.players:
                                    if player.hand.value <= 21:
                                        if player.hand.value > dealer_hand_value:
                                            player.win_bet(bet)
                                            print("-----------------------------------------------------------------")
                                            print(f"{player.name} wins!")
                                            print(f"{player.name} now has {player.chips} chips.")
                                        elif player.hand.value == dealer_hand_value:
                                            player.tie_bet(bet)
                                            print("-----------------------------------------------------------------")
                                            print(f"{player.name} ties with the dealer.")
                                            print(f"{player.name} now has {player.chips} chips.")
                                        else:
                                            print("-----------------------------------------------------------------")
                                            print(f"{player.name} loses.")
                                            print(f"{player.name} now has {player.chips} chips.")
                                self.clear_cards()    
                            while True:
                                again = input("do you want to play again? Press yes or no\n")
                                if again == "yes":
                                    playAgain = True
                                    break
                                elif again == "no":
                                    self.clear_cards()
                                    self.players = []
                                    playAgain = False
                                    break
                                else:
                                    print("Wrong input. Type yes or no")
                                                
                elif choice == "quit" or choice == "4":
                        print("You have successfully quit the program")
                        return
blackjack_game = Blackjack()
blackjack_game.play()   
